import refrom tkinter import *root = Tk()frame = Frame(root, width=300, height=300)frame.pack()entry = Entry(root)entry.pack(side=RIGHT)label = Label(root, text="Nombre")label.pack()print(entry.get())dna_file = open("Test2.txt", "r")content = dna_file.read()#content = content2content = content.replace(' ', '')content = content.upper()#content = "ATTTGCATTGCATCTATGCACGTTTAACTGTCA"#content = "ATTTGGATCCATGCCTAGG"initial_content = list(content)# min_len = int(input("Enter minimum length of palindromes: "))min_len = 4def comp(current):    current_comp = list(current)    for k in range(0, len(current_comp)):        if current_comp[k] == "A":            current_comp[k] = "T"        elif current_comp[k] == "G":            current_comp[k] = "C"        elif current_comp[k] == "T":            current_comp[k] = "A"        elif current_comp[k] == "C":            current_comp[k] = "G"    return "".join(current_comp)def reverse_comp(current_comp):    return current_comp[::-1]def remove_current(content):    return content[min_len:]def skip_first(working_content):    return working_content[1:]# def skip_len(working_content):#     start = min_len - 1#     return working_content[start:]# def look_for_matches(current_comp_reverse, working_content, current_start_index):#     palindromes = 0#     current_end_index = current_start_index + min_len - 1#     palindrome_start_index = current_end_index + 1#     palindrome_end_index = palindrome_start_index + min_len - 1#     while len(working_content) >= min_len:#         # print(working_content)#         if working_content[:min_len] == current_comp_reverse:#             # print(f'------------found {current_comp_reverse}')#             print(f"From {current_start_index} to {current_end_index} ({comp(reverse_comp(current_comp_reverse))})")#             print(f"Found in {palindrome_start_index} to {palindrome_end_index} ({current_comp_reverse})")#             palindromes += 1#         working_content = skip_first(working_content)#     return palindromesdef skip_all(working_content, palindrome_end_index):    return working_content[palindrome_end_index:] #modificar variable de nombre    def look_for_matches(current_comp_reverse, working_content, current_start_index):    palindromes = 0    current_end_index = current_start_index + min_len - 1    #palindrome_start_index = current_end_index + 1    #palindrome_end_index = palindrome_start_index + min_len - 1    removed_char = current_end_index    #print(removed_char)    while len(working_content) >= min_len*2:               regex = re.search(current_comp_reverse, working_content)        if regex != None:                                                palindromes += 1                        #removed_char += regex.span()[1] - 1            palindrome_start_index = regex.span()[0] + removed_char + 1            palindrome_end_index = regex.span()[1] + removed_char              print(f"From {current_start_index} to {current_end_index} ({comp(reverse_comp(current_comp_reverse))})")            print(f"Found in {palindrome_start_index} to {palindrome_end_index} ({current_comp_reverse})")            print('- - - - - - - - - - - - - - -')            working_content = skip_all(working_content, regex.span()[1])            removed_char += regex.span()[1]                        lab = Label(frame,text=f"From {current_start_index} to {current_end_index} ({comp(reverse_comp(current_comp_reverse))})")            lab2 = Label(frame, text = f"Found in {palindrome_start_index} to {palindrome_end_index} ({current_comp_reverse})")            lab3 = Label(frame, text = '- - - - - - - - - - - - - - -')            lab.pack()            lab2.pack()            lab3.pack()                                else:            break        # if working_content[:min_len] == current_comp_reverse:        #     # print(f'------------found {current_comp_reverse}')        #     print(f"From {current_start_index} to {current_end_index} ({comp(reverse_comp(current_comp_reverse))})")        #     print(f"Found in {palindrome_start_index} to {palindrome_end_index} ({current_comp_reverse})")        #     palindromes += 1        #working_content = skip_first(working_content)    return palindromespalindromes = 0current_start_index = 0while len(content) >= min_len*2:    # print(initial_content)    current = content[:min_len]    current_comp = comp(current)    current_comp_reverse = reverse_comp(current_comp)    working_content = remove_current(content)    palindromes += look_for_matches(current_comp_reverse, working_content, current_start_index)    content = skip_first(content)    current_start_index += 1print('Finished')print('There are ' + str(palindromes) + ' palindromes')lab4 = Label(frame, text = 'There are ' + str(palindromes) + ' palindromes')lab4.config(font=('helvetica', 16))lab4.pack()   root.mainloop()